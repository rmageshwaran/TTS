# TTS Virtual Microphone - Project Configuration

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tts-virtual-mic"
version = "1.0.0"
description = "Convert text to speech and route to virtual microphone using Sesame CSM"
readme = "docs/README.md"
license = {text = "MIT"}
authors = [
    {name = "TTS Virtual Microphone Team"}
]
maintainers = [
    {name = "TTS Virtual Microphone Team"}
]
keywords = [
    "tts", "text-to-speech", "virtual-microphone", "sesame-csm", "audio", "voice"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.52.1",
    "numpy>=1.21.0",
    "sounddevice>=0.4.6",
    "soundfile>=0.12.1",
    "pyyaml>=6.0",
    "dataclasses-json>=0.5.7",
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "requests>=2.28.0",
    "psutil>=5.9.0",
    "colorlog>=6.7.0",
    "tqdm>=4.64.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.12.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.2.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
    "responses>=0.23.0",
    "scipy>=1.9.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.1.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/tts-virtual-mic"
Documentation = "https://tts-virtual-mic.readthedocs.io/"
Repository = "https://github.com/your-org/tts-virtual-mic.git"
Issues = "https://github.com/your-org/tts-virtual-mic/issues"

[project.scripts]
tts-virtual-mic = "main:main"

[tool.setuptools.packages.find]
include = ["core*", "config*", "utils*", "plugins*", "interfaces*", "virtual_audio*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
config = ["*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
  | models
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
src_paths = ["core", "config", "utils", "plugins", "interfaces", "virtual_audio", "tests"]

# Flake8 configuration
[tool.flake8]
max-line-length = 100
ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D",
]
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "dist",
    ".venv",
    "venv",
    "models",
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "sounddevice.*",
    "soundfile.*",
    "torch.*",
    "transformers.*",
    "colorlog.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=config",
    "--cov=utils",
    "--cov=plugins",
    "--cov=interfaces",
    "--cov=virtual_audio",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "audio: marks tests that require audio devices",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["core", "config", "utils", "plugins", "interfaces", "virtual_audio"]
omit = [
    "tests/*",
    "docs/*",
    "scripts/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]

# Pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107"]
match_dir = "^(?!tests|docs|scripts).*"