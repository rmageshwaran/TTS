# Release Pipeline for TTS Virtual Microphone
name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Pre-release validation
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Run full test suite
      run: |
        pytest tests/ -v --tb=short --cov=core --cov=config --cov=utils
        
    - name: Run security checks
      run: |
        bandit -r core config utils plugins interfaces virtual_audio
        safety check

  # Build release packages
  build-release:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload to PyPI Test
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/* --verbose
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: dist/

  # Create GitHub release assets
  create-assets:
    name: Create Release Assets
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --name tts-virtual-mic-linux main.py
        
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --name tts-virtual-mic-windows main.py
        
    - name: Upload executable
      uses: actions/upload-artifact@v3
      with:
        name: executables-${{ matrix.os }}
        path: dist/

  # Deploy to PyPI
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build-release]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-packages
        path: dist/
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/* --verbose

  # Update release with assets
  update-release:
    name: Update Release Assets
    runs-on: ubuntu-latest
    needs: [create-assets, deploy-pypi]
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          executables-ubuntu-latest/*
          executables-windows-latest/*
          release-packages/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release notifications
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [deploy-pypi, update-release]
    if: always()
    
    steps:
    - name: Release Summary
      run: |
        echo "Release ${{ github.ref_name }} completed!"
        echo "PyPI deployment: ${{ needs.deploy-pypi.result }}"
        echo "Asset upload: ${{ needs.update-release.result }}"